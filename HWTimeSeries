{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from pathlib import Path\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Return Forecasting: Read Historical Daily Yen Futures Data\n",
    "In this notebook, you will load historical Dollar-Yen exchange rate futures data and apply time series analysis and modeling to determine whether there is any predictable behavior."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Last</th>\n",
       "      <th>Change</th>\n",
       "      <th>Settle</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Previous Day Open Interest</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1976-08-02</th>\n",
       "      <td>3398.0</td>\n",
       "      <td>3401.0</td>\n",
       "      <td>3398.0</td>\n",
       "      <td>3401.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3401.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1976-08-03</th>\n",
       "      <td>3401.0</td>\n",
       "      <td>3401.0</td>\n",
       "      <td>3401.0</td>\n",
       "      <td>3401.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3401.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1976-08-04</th>\n",
       "      <td>3401.0</td>\n",
       "      <td>3401.0</td>\n",
       "      <td>3401.0</td>\n",
       "      <td>3401.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3401.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1976-08-05</th>\n",
       "      <td>3401.0</td>\n",
       "      <td>3401.0</td>\n",
       "      <td>3401.0</td>\n",
       "      <td>3401.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3401.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1976-08-06</th>\n",
       "      <td>3401.0</td>\n",
       "      <td>3401.0</td>\n",
       "      <td>3401.0</td>\n",
       "      <td>3401.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3401.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Open    High     Low    Last  Change  Settle  Volume  \\\n",
       "Date                                                                 \n",
       "1976-08-02  3398.0  3401.0  3398.0  3401.0     NaN  3401.0     2.0   \n",
       "1976-08-03  3401.0  3401.0  3401.0  3401.0     NaN  3401.0     0.0   \n",
       "1976-08-04  3401.0  3401.0  3401.0  3401.0     NaN  3401.0     0.0   \n",
       "1976-08-05  3401.0  3401.0  3401.0  3401.0     NaN  3401.0     0.0   \n",
       "1976-08-06  3401.0  3401.0  3401.0  3401.0     NaN  3401.0     0.0   \n",
       "\n",
       "            Previous Day Open Interest  \n",
       "Date                                    \n",
       "1976-08-02                         1.0  \n",
       "1976-08-03                         1.0  \n",
       "1976-08-04                         1.0  \n",
       "1976-08-05                         1.0  \n",
       "1976-08-06                         1.0  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Futures contract on the Yen-dollar exchange rate:\n",
    "# This is the continuous chain of the futures contracts that are 1 month to expiration\n",
    "yen_futures = pd.read_csv(\n",
    "    Path(\"yen.csv\"), index_col=\"Date\", infer_datetime_format=True, parse_dates=True\n",
    ")\n",
    "yen_futures.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Last</th>\n",
       "      <th>Change</th>\n",
       "      <th>Settle</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Previous Day Open Interest</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1990-01-02</th>\n",
       "      <td>6954.0</td>\n",
       "      <td>6954.0</td>\n",
       "      <td>6835.0</td>\n",
       "      <td>6847.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6847.0</td>\n",
       "      <td>48336.0</td>\n",
       "      <td>51473.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1990-01-03</th>\n",
       "      <td>6877.0</td>\n",
       "      <td>6910.0</td>\n",
       "      <td>6865.0</td>\n",
       "      <td>6887.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6887.0</td>\n",
       "      <td>38206.0</td>\n",
       "      <td>53860.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1990-01-04</th>\n",
       "      <td>6937.0</td>\n",
       "      <td>7030.0</td>\n",
       "      <td>6924.0</td>\n",
       "      <td>7008.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7008.0</td>\n",
       "      <td>49649.0</td>\n",
       "      <td>55699.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1990-01-05</th>\n",
       "      <td>6952.0</td>\n",
       "      <td>6985.0</td>\n",
       "      <td>6942.0</td>\n",
       "      <td>6950.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6950.0</td>\n",
       "      <td>29944.0</td>\n",
       "      <td>53111.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1990-01-08</th>\n",
       "      <td>6936.0</td>\n",
       "      <td>6972.0</td>\n",
       "      <td>6936.0</td>\n",
       "      <td>6959.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6959.0</td>\n",
       "      <td>19763.0</td>\n",
       "      <td>52072.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Open    High     Low    Last  Change  Settle   Volume  \\\n",
       "Date                                                                  \n",
       "1990-01-02  6954.0  6954.0  6835.0  6847.0     NaN  6847.0  48336.0   \n",
       "1990-01-03  6877.0  6910.0  6865.0  6887.0     NaN  6887.0  38206.0   \n",
       "1990-01-04  6937.0  7030.0  6924.0  7008.0     NaN  7008.0  49649.0   \n",
       "1990-01-05  6952.0  6985.0  6942.0  6950.0     NaN  6950.0  29944.0   \n",
       "1990-01-08  6936.0  6972.0  6936.0  6959.0     NaN  6959.0  19763.0   \n",
       "\n",
       "            Previous Day Open Interest  \n",
       "Date                                    \n",
       "1990-01-02                     51473.0  \n",
       "1990-01-03                     53860.0  \n",
       "1990-01-04                     55699.0  \n",
       "1990-01-05                     53111.0  \n",
       "1990-01-08                     52072.0  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Trim the dataset to begin on January 1st, 1990\n",
    "yen_futures = yen_futures.loc[\"1990-01-01\":, :]\n",
    "yen_futures.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " # Return Forecasting: Initial Time-Series Plotting"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Start by plotting the \"Settle\" price. Do you see any patterns, long-term and/or short?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Date'>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot just the \"Settle\" column from the dataframe:\n",
    "# YOUR CODE HERE!\n",
    "yen_futures.Settle.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Decomposition Using a Hodrick-Prescott Filter"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Using a Hodrick-Prescott Filter, decompose the Settle price into a trend and noise."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import statsmodels.api as sm\n",
    "\n",
    "# Apply the Hodrick-Prescott Filter by decomposing the \"Settle\" price into two separate series:\n",
    "# YOUR CODE HERE!\n",
    "noise, trend = sm.tsa.filters.hpfilter(yen_futures[\"Settle\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('float64')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "noise.dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Settle</th>\n",
       "      <th>noise</th>\n",
       "      <th>trend</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1990-01-02</th>\n",
       "      <td>6847.0</td>\n",
       "      <td>-61.503967</td>\n",
       "      <td>6908.503967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1990-01-03</th>\n",
       "      <td>6887.0</td>\n",
       "      <td>-21.799756</td>\n",
       "      <td>6908.799756</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1990-01-04</th>\n",
       "      <td>7008.0</td>\n",
       "      <td>98.942896</td>\n",
       "      <td>6909.057104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1990-01-05</th>\n",
       "      <td>6950.0</td>\n",
       "      <td>40.776052</td>\n",
       "      <td>6909.223948</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1990-01-08</th>\n",
       "      <td>6959.0</td>\n",
       "      <td>49.689938</td>\n",
       "      <td>6909.310062</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Settle      noise        trend\n",
       "Date                                      \n",
       "1990-01-02  6847.0 -61.503967  6908.503967\n",
       "1990-01-03  6887.0 -21.799756  6908.799756\n",
       "1990-01-04  7008.0  98.942896  6909.057104\n",
       "1990-01-05  6950.0  40.776052  6909.223948\n",
       "1990-01-08  6959.0  49.689938  6909.310062"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a dataframe of just the settle price, and add columns for \"noise\" and \"trend\" series from above:\n",
    "# YOUR CODE HERE!\n",
    "yen_settle = yen_futures.Settle.to_frame()\n",
    "yen_settle['noise'] = noise\n",
    "yen_settle['trend'] = trend\n",
    "yen_settle.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'Settle vs. Trend'}, xlabel='Date'>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the Settle Price vs. the Trend for 2015 to the present\n",
    "# YOUR CODE HERE\n",
    "yen_trend = yen_settle.drop(columns=['noise'])\n",
    "yen_trend.loc[\"2015\":\"2020\"].plot(title='Settle vs. Trend')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Date'>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the Settle Noise\n",
    "# YOUR CODE HERE!\n",
    "\n",
    "noise.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Forecasting Returns using an ARMA Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using futures Settle *Returns*, estimate an ARMA model\n",
    "\n",
    "1. ARMA: Create an ARMA model and fit it to the returns data. Note: Set the AR and MA (\"p\" and \"q\") parameters to p=2 and q=1: order=(2, 1).\n",
    "2. Output the ARMA summary table and take note of the p-values of the lags. Based on the p-values, is the model a good fit (p < 0.05)?\n",
    "3. Plot the 5-day forecast of the forecasted returns (the results forecast from ARMA model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Settle</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-10-09</th>\n",
       "      <td>-0.410601</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-10</th>\n",
       "      <td>-0.369458</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-11</th>\n",
       "      <td>-0.564304</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-14</th>\n",
       "      <td>0.151335</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-15</th>\n",
       "      <td>-0.469509</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Settle\n",
       "Date                \n",
       "2019-10-09 -0.410601\n",
       "2019-10-10 -0.369458\n",
       "2019-10-11 -0.564304\n",
       "2019-10-14  0.151335\n",
       "2019-10-15 -0.469509"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a series using \"Settle\" price percentage returns, drop any nan\"s, and check the results:\n",
    "# (Make sure to multiply the pct_change() results by 100)\n",
    "# In this case, you may have to replace inf, -inf values with np.nan\"s\n",
    "returns = (yen_futures[[\"Settle\"]].pct_change() * 100)\n",
    "returns = returns.replace(-np.inf, np.nan).dropna()\n",
    "returns.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/elisakkal/opt/anaconda3/lib/python3.8/site-packages/statsmodels/tsa/arima_model.py:472: FutureWarning: \n",
      "statsmodels.tsa.arima_model.ARMA and statsmodels.tsa.arima_model.ARIMA have\n",
      "been deprecated in favor of statsmodels.tsa.arima.model.ARIMA (note the .\n",
      "between arima and model) and\n",
      "statsmodels.tsa.SARIMAX. These will be removed after the 0.12 release.\n",
      "\n",
      "statsmodels.tsa.arima.model.ARIMA makes use of the statespace framework and\n",
      "is both well tested and maintained.\n",
      "\n",
      "To silence this warning and continue using ARMA and ARIMA until they are\n",
      "removed, use:\n",
      "\n",
      "import warnings\n",
      "warnings.filterwarnings('ignore', 'statsmodels.tsa.arima_model.ARMA',\n",
      "                        FutureWarning)\n",
      "warnings.filterwarnings('ignore', 'statsmodels.tsa.arima_model.ARIMA',\n",
      "                        FutureWarning)\n",
      "\n",
      "  warnings.warn(ARIMA_DEPRECATION_WARN, FutureWarning)\n"
     ]
    }
   ],
   "source": [
    "import statsmodels.api as sm\n",
    "from statsmodels.tsa.arima_model import ARMA \n",
    "# Estimate and ARMA model using statsmodels (use order=(2, 1))\n",
    "# YOUR CODE HERE!\n",
    "model = ARMA(returns.values, order=(2,1))\n",
    "# Fit the model and assign it to a variable called results\n",
    "# YOUR CODE HERE!\n",
    "results = model.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>ARMA Model Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>         <td>y</td>        <th>  No. Observations:  </th>   <td>7514</td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>            <td>ARMA(2, 1)</td>    <th>  Log Likelihood     </th> <td>-7894.071</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>css-mle</td>     <th>  S.D. of innovations</th>   <td>0.692</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>          <td>Mon, 30 Nov 2020</td> <th>  AIC                </th> <td>15798.142</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>              <td>17:19:00</td>     <th>  BIC                </th> <td>15832.765</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Sample:</th>                <td>0</td>        <th>  HQIC               </th> <td>15810.030</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th></th>                       <td> </td>        <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "     <td></td>        <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>   <td>    0.0063</td> <td>    0.008</td> <td>    0.804</td> <td> 0.422</td> <td>   -0.009</td> <td>    0.022</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>ar.L1.y</th> <td>   -0.3060</td> <td>    1.278</td> <td>   -0.239</td> <td> 0.811</td> <td>   -2.810</td> <td>    2.198</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>ar.L2.y</th> <td>   -0.0019</td> <td>    0.019</td> <td>   -0.099</td> <td> 0.921</td> <td>   -0.040</td> <td>    0.036</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>ma.L1.y</th> <td>    0.2944</td> <td>    1.278</td> <td>    0.230</td> <td> 0.818</td> <td>   -2.210</td> <td>    2.798</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<caption>Roots</caption>\n",
       "<tr>\n",
       "    <td></td>   <th>            Real</th>  <th>         Imaginary</th> <th>         Modulus</th>  <th>        Frequency</th>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>AR.1</th> <td>          -3.3375</td> <td>          +0.0000j</td> <td>           3.3375</td> <td>           0.5000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>AR.2</th> <td>        -157.2840</td> <td>          +0.0000j</td> <td>         157.2840</td> <td>           0.5000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>MA.1</th> <td>          -3.3966</td> <td>          +0.0000j</td> <td>           3.3966</td> <td>           0.5000</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                              ARMA Model Results                              \n",
       "==============================================================================\n",
       "Dep. Variable:                      y   No. Observations:                 7514\n",
       "Model:                     ARMA(2, 1)   Log Likelihood               -7894.071\n",
       "Method:                       css-mle   S.D. of innovations              0.692\n",
       "Date:                Mon, 30 Nov 2020   AIC                          15798.142\n",
       "Time:                        17:19:00   BIC                          15832.765\n",
       "Sample:                             0   HQIC                         15810.030\n",
       "                                                                              \n",
       "==============================================================================\n",
       "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "const          0.0063      0.008      0.804      0.422      -0.009       0.022\n",
       "ar.L1.y       -0.3060      1.278     -0.239      0.811      -2.810       2.198\n",
       "ar.L2.y       -0.0019      0.019     -0.099      0.921      -0.040       0.036\n",
       "ma.L1.y        0.2944      1.278      0.230      0.818      -2.210       2.798\n",
       "                                    Roots                                    \n",
       "=============================================================================\n",
       "                  Real          Imaginary           Modulus         Frequency\n",
       "-----------------------------------------------------------------------------\n",
       "AR.1           -3.3375           +0.0000j            3.3375            0.5000\n",
       "AR.2         -157.2840           +0.0000j          157.2840            0.5000\n",
       "MA.1           -3.3966           +0.0000j            3.3966            0.5000\n",
       "-----------------------------------------------------------------------------\n",
       "\"\"\""
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Output model summary results:\n",
    "# YOUR CODE HERE!\n",
    "results.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'USDJPY 5 Day Returns Forecast'}>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the 5 Day Returns Forecast\n",
    "# YOUR CODE HERE!\n",
    "pd.DataFrame(results.forecast(steps=5)[0]).plot(title= \"USDJPY 5 Day Returns Forecast\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Forecasting the Settle Price using an ARIMA Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " 1. Using the *raw* Yen **Settle Price**, estimate an ARIMA model.\n",
    "     1. Set P=5, D=1, and Q=1 in the model (e.g., ARIMA(df, order=(5,1,1))\n",
    "     2. P= # of Auto-Regressive Lags, D= # of Differences (this is usually =1), Q= # of Moving Average Lags\n",
    " 2. Output the ARIMA summary table and take note of the p-values of the lags. Based on the p-values, is the model a good fit (p < 0.05)?\n",
    " 3. Construct a 5 day forecast for the Settle Price. What does the model forecast will happen to the Japanese Yen in the near term?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/elisakkal/opt/anaconda3/lib/python3.8/site-packages/statsmodels/tsa/arima_model.py:472: FutureWarning: \n",
      "statsmodels.tsa.arima_model.ARMA and statsmodels.tsa.arima_model.ARIMA have\n",
      "been deprecated in favor of statsmodels.tsa.arima.model.ARIMA (note the .\n",
      "between arima and model) and\n",
      "statsmodels.tsa.SARIMAX. These will be removed after the 0.12 release.\n",
      "\n",
      "statsmodels.tsa.arima.model.ARIMA makes use of the statespace framework and\n",
      "is both well tested and maintained.\n",
      "\n",
      "To silence this warning and continue using ARMA and ARIMA until they are\n",
      "removed, use:\n",
      "\n",
      "import warnings\n",
      "warnings.filterwarnings('ignore', 'statsmodels.tsa.arima_model.ARMA',\n",
      "                        FutureWarning)\n",
      "warnings.filterwarnings('ignore', 'statsmodels.tsa.arima_model.ARIMA',\n",
      "                        FutureWarning)\n",
      "\n",
      "  warnings.warn(ARIMA_DEPRECATION_WARN, FutureWarning)\n",
      "/Users/elisakkal/opt/anaconda3/lib/python3.8/site-packages/statsmodels/tsa/base/tsa_model.py:581: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
      "  warnings.warn('A date index has been provided, but it has no'\n",
      "/Users/elisakkal/opt/anaconda3/lib/python3.8/site-packages/statsmodels/tsa/base/tsa_model.py:581: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
      "  warnings.warn('A date index has been provided, but it has no'\n",
      "/Users/elisakkal/opt/anaconda3/lib/python3.8/site-packages/statsmodels/tsa/arima_model.py:472: FutureWarning: \n",
      "statsmodels.tsa.arima_model.ARMA and statsmodels.tsa.arima_model.ARIMA have\n",
      "been deprecated in favor of statsmodels.tsa.arima.model.ARIMA (note the .\n",
      "between arima and model) and\n",
      "statsmodels.tsa.SARIMAX. These will be removed after the 0.12 release.\n",
      "\n",
      "statsmodels.tsa.arima.model.ARIMA makes use of the statespace framework and\n",
      "is both well tested and maintained.\n",
      "\n",
      "To silence this warning and continue using ARMA and ARIMA until they are\n",
      "removed, use:\n",
      "\n",
      "import warnings\n",
      "warnings.filterwarnings('ignore', 'statsmodels.tsa.arima_model.ARMA',\n",
      "                        FutureWarning)\n",
      "warnings.filterwarnings('ignore', 'statsmodels.tsa.arima_model.ARIMA',\n",
      "                        FutureWarning)\n",
      "\n",
      "  warnings.warn(ARIMA_DEPRECATION_WARN, FutureWarning)\n"
     ]
    }
   ],
   "source": [
    "from statsmodels.tsa.arima_model import ARIMA\n",
    "\n",
    "# Estimate and ARIMA Model:\n",
    "# Hint: ARIMA(df, order=(p, d, q))\n",
    "# YOUR CODE HERE!\n",
    "yen_values = ARIMA(yen_futures.Settle, order=(5,1,1))\n",
    "# Fit the model\n",
    "# YOUR CODE HERE!\n",
    "results1 = yen_values.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>ARIMA Model Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>     <td>D.Settle</td>     <th>  No. Observations:  </th>    <td>7514</td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>          <td>ARIMA(5, 1, 1)</td>  <th>  Log Likelihood     </th> <td>-41944.619</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>css-mle</td>     <th>  S.D. of innovations</th>   <td>64.281</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>          <td>Mon, 30 Nov 2020</td> <th>  AIC                </th>  <td>83905.238</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>              <td>17:19:12</td>     <th>  BIC                </th>  <td>83960.635</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Sample:</th>                <td>1</td>        <th>  HQIC               </th>  <td>83924.259</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th></th>                       <td> </td>        <th>                     </th>      <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "         <td></td>           <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>          <td>    0.3162</td> <td>    0.700</td> <td>    0.452</td> <td> 0.651</td> <td>   -1.056</td> <td>    1.688</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>ar.L1.D.Settle</th> <td>    0.2826</td> <td>    0.699</td> <td>    0.404</td> <td> 0.686</td> <td>   -1.087</td> <td>    1.652</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>ar.L2.D.Settle</th> <td>    0.0007</td> <td>    0.016</td> <td>    0.043</td> <td> 0.965</td> <td>   -0.030</td> <td>    0.032</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>ar.L3.D.Settle</th> <td>   -0.0126</td> <td>    0.012</td> <td>   -1.032</td> <td> 0.302</td> <td>   -0.037</td> <td>    0.011</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>ar.L4.D.Settle</th> <td>   -0.0137</td> <td>    0.015</td> <td>   -0.889</td> <td> 0.374</td> <td>   -0.044</td> <td>    0.016</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>ar.L5.D.Settle</th> <td>   -0.0011</td> <td>    0.018</td> <td>   -0.064</td> <td> 0.949</td> <td>   -0.036</td> <td>    0.034</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>ma.L1.D.Settle</th> <td>   -0.2976</td> <td>    0.699</td> <td>   -0.426</td> <td> 0.670</td> <td>   -1.667</td> <td>    1.072</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<caption>Roots</caption>\n",
       "<tr>\n",
       "    <td></td>   <th>            Real</th>  <th>         Imaginary</th> <th>         Modulus</th>  <th>        Frequency</th>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>AR.1</th> <td>           1.8922</td> <td>          -1.3782j</td> <td>           2.3410</td> <td>          -0.1002</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>AR.2</th> <td>           1.8922</td> <td>          +1.3782j</td> <td>           2.3410</td> <td>           0.1002</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>AR.3</th> <td>          -2.2725</td> <td>          -3.0188j</td> <td>           3.7785</td> <td>          -0.3527</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>AR.4</th> <td>          -2.2725</td> <td>          +3.0188j</td> <td>           3.7785</td> <td>           0.3527</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>AR.5</th> <td>         -11.1557</td> <td>          -0.0000j</td> <td>          11.1557</td> <td>          -0.5000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>MA.1</th> <td>           3.3597</td> <td>          +0.0000j</td> <td>           3.3597</td> <td>           0.0000</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                             ARIMA Model Results                              \n",
       "==============================================================================\n",
       "Dep. Variable:               D.Settle   No. Observations:                 7514\n",
       "Model:                 ARIMA(5, 1, 1)   Log Likelihood              -41944.619\n",
       "Method:                       css-mle   S.D. of innovations             64.281\n",
       "Date:                Mon, 30 Nov 2020   AIC                          83905.238\n",
       "Time:                        17:19:12   BIC                          83960.635\n",
       "Sample:                             1   HQIC                         83924.259\n",
       "                                                                              \n",
       "==================================================================================\n",
       "                     coef    std err          z      P>|z|      [0.025      0.975]\n",
       "----------------------------------------------------------------------------------\n",
       "const              0.3162      0.700      0.452      0.651      -1.056       1.688\n",
       "ar.L1.D.Settle     0.2826      0.699      0.404      0.686      -1.087       1.652\n",
       "ar.L2.D.Settle     0.0007      0.016      0.043      0.965      -0.030       0.032\n",
       "ar.L3.D.Settle    -0.0126      0.012     -1.032      0.302      -0.037       0.011\n",
       "ar.L4.D.Settle    -0.0137      0.015     -0.889      0.374      -0.044       0.016\n",
       "ar.L5.D.Settle    -0.0011      0.018     -0.064      0.949      -0.036       0.034\n",
       "ma.L1.D.Settle    -0.2976      0.699     -0.426      0.670      -1.667       1.072\n",
       "                                    Roots                                    \n",
       "=============================================================================\n",
       "                  Real          Imaginary           Modulus         Frequency\n",
       "-----------------------------------------------------------------------------\n",
       "AR.1            1.8922           -1.3782j            2.3410           -0.1002\n",
       "AR.2            1.8922           +1.3782j            2.3410            0.1002\n",
       "AR.3           -2.2725           -3.0188j            3.7785           -0.3527\n",
       "AR.4           -2.2725           +3.0188j            3.7785            0.3527\n",
       "AR.5          -11.1557           -0.0000j           11.1557           -0.5000\n",
       "MA.1            3.3597           +0.0000j            3.3597            0.0000\n",
       "-----------------------------------------------------------------------------\n",
       "\"\"\""
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Output model summary results:\n",
    "results1.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'USDJPY 5 Day Price Forecast'}>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the 5 Day Price Forecast\n",
    "# YOUR CODE HERE!\n",
    "pd.DataFrame(results1.forecast(steps=5)[0]).plot(title= \"USDJPY 5 Day Price Forecast\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Volatility Forecasting with GARCH\n",
    "\n",
    "Rather than predicting returns, let's forecast near-term **volatility** of Japanese Yen futures returns. Being able to accurately predict volatility will be extremely useful if we want to trade in derivatives or quantify our maximum loss.\n",
    " \n",
    "Using futures Settle *Returns*, estimate an GARCH model\n",
    "\n",
    "1. GARCH: Create an GARCH model and fit it to the returns data. Note: Set the parameters to p=2 and q=1: order=(2, 1).\n",
    "2. Output the GARCH summary table and take note of the p-values of the lags. Based on the p-values, is the model a good fit (p < 0.05)?\n",
    "3. Plot the 5-day forecast of the volatility."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "outputs": [],
   "source": [
    "import arch \n",
    "from arch import arch_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Estimate a GARCH model:\n",
    "# YOUR CODE HERE!\n",
    "model1 = arch_model(returns, mean=\"Zero\", vol=\"GARCH\", p=2,q=1)\n",
    "# Fit the model\n",
    "# YOUR CODE HERE!\n",
    "res= model1.fit(disp=\"off\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Zero Mean - GARCH Model Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>Settle</td>       <th>  R-squared:         </th>  <td>   0.000</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Mean Model:</th>         <td>Zero Mean</td>     <th>  Adj. R-squared:    </th>  <td>   0.000</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Vol Model:</th>            <td>GARCH</td>       <th>  Log-Likelihood:    </th> <td>  -7461.93</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Distribution:</th>        <td>Normal</td>       <th>  AIC:               </th> <td>   14931.9</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>        <td>Maximum Likelihood</td> <th>  BIC:               </th> <td>   14959.6</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th></th>                        <td></td>          <th>  No. Observations:  </th>    <td>7514</td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>           <td>Mon, Nov 30 2020</td>  <th>  Df Residuals:      </th>    <td>7510</td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>               <td>17:19:27</td>      <th>  Df Model:          </th>      <td>4</td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<caption>Volatility Model</caption>\n",
       "<tr>\n",
       "      <td></td>        <th>coef</th>     <th>std err</th>      <th>t</th>       <th>P>|t|</th>      <th>95.0% Conf. Int.</th>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>omega</th>    <td>4.2896e-03</td> <td>2.057e-03</td> <td>    2.085</td> <td>3.708e-02</td>  <td>[2.571e-04,8.322e-03]</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>alpha[1]</th> <td>    0.0381</td> <td>1.282e-02</td> <td>    2.970</td> <td>2.974e-03</td>  <td>[1.295e-02,6.321e-02]</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>alpha[2]</th>   <td>0.0000</td>   <td>1.703e-02</td>   <td>0.000</td>   <td>    1.000</td> <td>[-3.338e-02,3.338e-02]</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>beta[1]</th>  <td>    0.9536</td> <td>1.420e-02</td> <td>   67.135</td>   <td>0.000</td>      <td>[  0.926,  0.981]</td>  \n",
       "</tr>\n",
       "</table><br/><br/>Covariance estimator: robust"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                       Zero Mean - GARCH Model Results                        \n",
       "==============================================================================\n",
       "Dep. Variable:                 Settle   R-squared:                       0.000\n",
       "Mean Model:                 Zero Mean   Adj. R-squared:                  0.000\n",
       "Vol Model:                      GARCH   Log-Likelihood:               -7461.93\n",
       "Distribution:                  Normal   AIC:                           14931.9\n",
       "Method:            Maximum Likelihood   BIC:                           14959.6\n",
       "                                        No. Observations:                 7514\n",
       "Date:                Mon, Nov 30 2020   Df Residuals:                     7510\n",
       "Time:                        17:19:27   Df Model:                            4\n",
       "                               Volatility Model                              \n",
       "=============================================================================\n",
       "                 coef    std err          t      P>|t|       95.0% Conf. Int.\n",
       "-----------------------------------------------------------------------------\n",
       "omega      4.2896e-03  2.057e-03      2.085  3.708e-02  [2.571e-04,8.322e-03]\n",
       "alpha[1]       0.0381  1.282e-02      2.970  2.974e-03  [1.295e-02,6.321e-02]\n",
       "alpha[2]       0.0000  1.703e-02      0.000      1.000 [-3.338e-02,3.338e-02]\n",
       "beta[1]        0.9536  1.420e-02     67.135      0.000      [  0.926,  0.981]\n",
       "=============================================================================\n",
       "\n",
       "Covariance estimator: robust\n",
       "\"\"\""
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Summarize the model results\n",
    "# YOUR CODE HERE!\n",
    "res.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2019-10-15'"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Find the last day of the dataset\n",
    "last_day = returns.index.max().strftime('%Y-%m-%d')\n",
    "last_day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<arch.univariate.base.ARCHModelForecast at 0x7fd442cc0cd0>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a 5 day forecast of volatility\n",
    "forecast_horizon = 5\n",
    "# Start the forecast using the last_day calculated above\n",
    "# YOUR CODE HERE!\n",
    "forecasts = res.forecast(start=\"2019-10-15\", horizon=forecast_horizon)\n",
    "forecasts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>h.1</th>\n",
       "      <th>h.2</th>\n",
       "      <th>h.3</th>\n",
       "      <th>h.4</th>\n",
       "      <th>h.5</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-10-15</th>\n",
       "      <td>7.434048</td>\n",
       "      <td>7.475745</td>\n",
       "      <td>7.516867</td>\n",
       "      <td>7.557426</td>\n",
       "      <td>7.597434</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 h.1       h.2       h.3       h.4       h.5\n",
       "Date                                                        \n",
       "2019-10-15  7.434048  7.475745  7.516867  7.557426  7.597434"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Annualize the forecast\n",
    "intermediate = np.sqrt(forecasts.variance.dropna() * 252)\n",
    "intermediate.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Date</th>\n",
       "      <th>2019-10-15</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>h.1</th>\n",
       "      <td>7.434048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>h.2</th>\n",
       "      <td>7.475745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>h.3</th>\n",
       "      <td>7.516867</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>h.4</th>\n",
       "      <td>7.557426</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>h.5</th>\n",
       "      <td>7.597434</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Date  2019-10-15\n",
       "h.1     7.434048\n",
       "h.2     7.475745\n",
       "h.3     7.516867\n",
       "h.4     7.557426\n",
       "h.5     7.597434"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Transpose the forecast so that it is easier to plot\n",
    "final = intermediate.dropna().T\n",
    "final.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':' JPY 5 Da Forecast of Volatility'}>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the final forecast\n",
    "# YOUR CODE HERE!\n",
    "final.plot(title=\" JPY 5 Da Forecast of Volatility\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Conclusions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on your time series analysis, would you buy the yen now?\n",
    "\n",
    "Yes the trend indicates a yen apreciation against the USD\n",
    "\n",
    "Is the risk of the yen expected to increase or decrease?\n",
    "\n",
    "In the short term horizon the the risk is decreasing\n",
    "\n",
    "Based on the model evaluation, would you feel confident in using these models for trading?\n",
    "\n",
    "Is a good model for the short term strategies its  the e efficacy tend to diminish in the long term ones."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "file_extension": ".py",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  },
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
